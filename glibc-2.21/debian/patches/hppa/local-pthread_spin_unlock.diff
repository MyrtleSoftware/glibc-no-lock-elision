Index: eglibc-2.18/sysdeps/hppa/nptl/pthread_spin_init.c
===================================================================
--- eglibc-2.18.orig/sysdeps/hppa/nptl/pthread_spin_init.c	2013-06-15 13:37:04.000000000 -0400
+++ eglibc-2.18/sysdeps/hppa/nptl/pthread_spin_init.c	2014-05-03 17:52:31.677662598 -0400
@@ -20,9 +20,9 @@
 int
 pthread_spin_init (pthread_spinlock_t *lock, int pshared)
 {
-  int tmp = 0;
-  /* This should be a memory barrier to newer compilers */
-  __asm__ __volatile__ ("stw,ma %1,0(%0)"
-                        : : "r" (lock), "r" (tmp) : "memory");
+  /* The LWS-CAS operation on hppa is a synthetic atomic operation
+     that doesn't provide the type of coherency that we need. Therefore
+     we force that coherency by using LWS-CAS again.  */
+  atomic_exchange_rel (lock, 0);
   return 0;
 }
Index: eglibc-2.18/sysdeps/hppa/nptl/pthread_spin_unlock.c
===================================================================
--- eglibc-2.18.orig/sysdeps/hppa/nptl/pthread_spin_unlock.c	2013-06-15 13:37:04.000000000 -0400
+++ eglibc-2.18/sysdeps/hppa/nptl/pthread_spin_unlock.c	2014-05-03 17:54:51.829030840 -0400
@@ -20,9 +20,9 @@
 int
 pthread_spin_unlock (pthread_spinlock_t *lock)
 {
-  int tmp = 0;
-  /* This should be a memory barrier to newer compilers */
-  __asm__ __volatile__ ("stw,ma %1,0(%0)"
-                        : : "r" (lock), "r" (tmp) : "memory");
+  /* The LWS-CAS operation on hppa is a synthetic atomic operation
+     that doesn't provide the type of coherency that we need. Therefore
+     we force that coherency by using LWS-CAS again.  */
+  atomic_exchange_rel (lock, 0);
   return 0;
 }
